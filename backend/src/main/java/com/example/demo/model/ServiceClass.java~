package com.example.demo.model;


import com.example.demo.utils.Availability;
import com.example.demo.utils.AvailabilityConverter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "service")
public class ServiceClass {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;


    private String name;
    private String description;
    @Column(nullable = false)
    private double price;

    private String imageUrl;  // Agrega este campo para almacenar la URL de la imagen

    @ManyToOne
    @JoinColumn(name = "photographer_id", nullable = false)
    @JsonIgnore
    private User photographer;

    @OneToMany(mappedBy = "service", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Rating> ratings;

    @OneToMany(mappedBy = "service", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Booking> bookings;

    @ManyToOne
    @JoinColumn(name = "style_id", nullable = false)
    private Style style;

    private String availability;


    /*PARA CREAR O RECUPERAR LA DISPONIBILIDAD DE UN SERVICIO LA CONVERSION SE REALIZA AUTOMATICAMENTE:*/

                  /*  // Crear el objeto Availability
                    Availability availability = new Availability();
                // Configurar los días y excepciones
                // ...

                // Establecer el campo availability
                service.setAvailability(availability);

                // Guardar el servicio
                serviceRepository.save(service);

                    // Al recuperar el servicio
                    Service service = serviceRepository.findById(id).orElse(null);
                if (service != null) {
                        Availability availability = service.getAvailability();
                        // Usar la disponibilidad según sea necesario
                    }
                */


}
