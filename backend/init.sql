create type user_role as enum ('client', 'photographer');

alter type user_role owner to slavik;

create table fee
(
    id          serial
        primary key,
    name        varchar(100)   not null,
    price       numeric(10, 2) not null,
    description varchar(255)
);

alter table fee
    owner to slavik;

create table user_style
(
    photographer_id integer not null,
    style_id        integer not null,
    primary key (photographer_id, style_id)
);

alter table user_style
    owner to slavik;

create table user_fee
(
    photographer_id integer not null,
    fee_id          integer not null
        references fee
            on delete cascade,
    primary key (photographer_id, fee_id)
);

alter table user_fee
    owner to slavik;

create table style
(
    id          integer generated by default as identity
        primary key,
    description varchar(255),
    name        varchar(255)
);

alter table style
    owner to slavik;

create table users
(
    active        boolean      not null,
    id            integer generated by default as identity
        primary key,
    registry_date timestamp(6),
    email         varchar(255),
    name          varchar(255),
    password_hash varchar(255),
    phone_number  varchar(255),
    role          varchar(255) not null
        constraint users_role_check
            check ((role)::text = ANY ((ARRAY ['CLIENT'::character varying, 'PHOTOGRAPHER'::character varying])::text[]))
);

alter table users
    owner to slavik;

create table service
(
    id              integer generated by default as identity
        primary key,
    photographer_id integer          not null
        constraint fkaufggr8g77q7fmbobaeuhstvs
            references users,
    price           double precision not null,
    style_id        integer          not null
        constraint fkn2aflxlxeqafedfbha94yj1e6
            references style,
    availability    varchar(255),
    description     varchar(255),
    image_url       varchar(255),
    name            varchar(255)
);

alter table service
    owner to slavik;

create table booking
(
    client_id    integer      not null
        constraint fkpqns56jao2qke86nvgwp6vvo2
            references users,
    id           integer generated by default as identity
        primary key,
    service_id   integer      not null
        constraint fkcebnlefwi9r13txu8btclnmsu
            references service,
    booking_date timestamp(6) not null,
    date         timestamp(6) not null,
    state        varchar(255) not null
        constraint booking_state_check
            check ((state)::text = ANY
                   ((ARRAY ['active'::character varying, 'pending'::character varying, 'done'::character varying, 'cancelled'::character varying])::text[]))
);

alter table booking
    owner to slavik;

create table rating
(
    client_id  integer not null
        constraint fkscikg2e8gidcb7f1ij6odijea
            references users,
    id         integer generated by default as identity
        primary key,
    rating     integer not null
        constraint rating_rating_check
            check ((rating <= 5) AND (rating >= 1)),
    service_id integer not null
        constraint fkdnscl1w9t9cgl828eaqwaubvx
            references service,
    created_at timestamp(6),
    comment    varchar(255)
);

alter table rating
    owner to slavik;

create function enforce_booking_roles() returns trigger
    language plpgsql
as
$$
BEGIN
    -- Ensure client_id refers to a client
    IF (SELECT role FROM "User" WHERE id = NEW.client_id) <> 'client' THEN
        RAISE EXCEPTION 'client_id must refer to a user with the role client';
    END IF;
    -- Ensure photographer_id refers to a photographer
    IF (SELECT role FROM "User" WHERE id = NEW.photographer_id) <> 'photographer' THEN
        RAISE EXCEPTION 'photographer_id must refer to a user with the role photographer';
    END IF;
    RETURN NEW;
END;
$$;

alter function enforce_booking_roles() owner to slavik;

create function enforce_user_style_roles() returns trigger
    language plpgsql
as
$$
BEGIN
    -- Ensure photographer_id refers to a photographer
    IF (SELECT role FROM "User" WHERE id = NEW.photographer_id) <> 'photographer' THEN
        RAISE EXCEPTION 'photographer_id must refer to a user with the role photographer';
    END IF;
    RETURN NEW;
END;
$$;

alter function enforce_user_style_roles() owner to slavik;

create trigger user_style_role_check
    before insert or update
    on user_style
    for each row
execute procedure enforce_user_style_roles();

create function enforce_user_fee_roles() returns trigger
    language plpgsql
as
$$
BEGIN
    -- Ensure photographer_id refers to a photographer
    IF (SELECT role FROM "User" WHERE id = NEW.photographer_id) <> 'photographer' THEN
        RAISE EXCEPTION 'photographer_id must refer to a user with the role photographer';
    END IF;
    RETURN NEW;
END;
$$;

alter function enforce_user_fee_roles() owner to slavik;

create trigger user_fee_role_check
    before insert or update
    on user_fee
    for each row
execute procedure enforce_user_fee_roles();

